print(a)
a = 1
print(a)
a = c(1,2,3,4,5)
a
1:5
1:5 -> b
b
a = c(1, "test")
a
# 행렬
d = array(1:20, dim=(4,5))
# 행렬
d = array(1:20, dim=c(4,5))
d
e = matrix(1:20, nrow=2)
e
# 리스트 형태(python에서는 dict 형태와 흡사)
f = list(name = 'test', age = 20, phon = '01012345678')
f
f['name']
f['age']
df = data.frame(name = c('test', 'test2'),
age = c(20, 30),
phone = c('01012345678', '01098765432'))
df
# 조건문 (if문)
a <- 10
if(a> 15){
print('a는 15보다 크다')
}
if(a> 15){
print('a는 15보다 크다')
}else{
print('a는 15보다 작거나 같다')
}
if(a> 15){
print('a는 15보다 크다')
}else if (a==15){
print('a는 15와 같다')
}else{
print('a는 15보다 작다')
}
# which문 (python에서 find() 흡사)
name =c("test", "test2", "test3")
which(name == 'test2')
which(name != 'test2')
which(name == 'test5')
# 함수
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# 연산자 생성
"%s%" <- function(x,y){
return = x + y
}
5%s%2
# 연산자 생성
"%s%" <- function(x,y){
result = x + y
return(result)
}
5%s%2
print('Hello World')
func_1 = function(){
print('Hello World')
}
func_1()
func_2 = function(x,y){
result = x ^ y
return(result)
}
func_2(5,2)
func_2 = function(x,y){
retunr(x ^ y)
}
func_2(5,2)
return(x ^ y)
func_2 = function(x,y){
return(x ^ y)
}
func_2(5,2)
# 함수에 매개변수에 기본값을 지정
func_3 = function(x,y=3){
return(x - y)
}
func_3(5)
name = c("test", "test2", "test3", "test4")
grade = c(1,3,2,1)
student = data.frame(name, grade)
student
# 행렬
midturm = c(70, 80, 60, 90)
final = c(60, 90, 80, 90)
score = cbind(midturm, final)
score
total_scorre = midturm + final
total_score = midturm + final
total_score
students= data.frame(student, score, total_score)
studnets
students
# gender 컬럼을 추가
gender = c("F", "M", "M", "F")
data.frame(students,gender)
students$gender = gender
students
# 방법1
cbind(students, gender)
# 컬럼을 하나(midturm)만 출력하려면?
students$midturm
students[['midturm']]
# 행을 추가한다.
new_student = data.frame(
name = "test5",
grade = 3,
midturm = 80,
final = 60,
gender= 'F'
)
new_student
# 행을 추가한다.
new_student = data.frame(
name = "test5",
grade = 3,
midturm = 80,
final = 60,
gender= 'F',
total_score = 140
)
new_student
rbind(students, new_student)
rbind(students, new_student) -> students
# 데이터프레임의 필터링
students[1]
# 데이터프레임의 필터링
students[1,]
students[c(2,4),]
students[1:3,]
studnets[-1,]
students[-1,]
#특정한 조건을 이용해서 필터링
# 학년이 2학년 이상인 경우
students[['grade']] > 2
#특정한 조건을 이용해서 필터링
# 학년이 2학년 이상인 경우
students[['grade']] >= 2 # 결과가 행이 5개라서 5개 나옴
students[students[['grade']]] >=2,]
students[students[['grade']] >=2,]
# 중간 성적이 70 이상이고 기말의 성적이 90 이상인 학생들의 정보를 출력
students[(students[['midturm']] >=70) and (students[['final']] >=900),]
# 중간 성적이 70 이상이고 기말의 성적이 90 이상인 학생들의 정보를 출력
students[students[['midturm']] >=70 & students[['final']] >=900,]
# 중간 성적이 70 이상이고 기말의 성적이 90 이상인 학생들의 정보를 출력
students[students[['midturm']] >=70 & students[['final']] >=90,]
# 정렬 변경
order(students$grade)
students[order(students$grade),]
students[-order(students$grade),]
students[order(-students$grade),]
students[order(students$grade, decreasing = True),]
students[order(students$grade, decreasing = TRUE),]
df = read.csv("../csv/csv/example.csv")
df = read.csv("csv/csv/example.csv")
df
view(df)
View(df)
dim(df)
summary(df)
# 데이터프레임의 정보를 출력
str(df)
head(df)
tail(df)
df[,-1]
library(dplyr)
# 컬럼의 이름 변경
rename(df, '이름' = Name)
df = read.csv("csv/csv/csv_example.csv")
df = read.csv("csv/csv/csv_exam.csv")
df
df = read.csv("csv/csv/example.csv")
df
head(df)
tail(df)
View(df)
dim(df)
summary(df)
# 데이터프레임의 정보를 출력
str(df)
library(dplyr)
# 컬럼의 이름 변경
rename(df, '이름' = Name)
df = read.csv("csv/csv/csv_exam.csv")
df
View(df)
# 새로운 파생변수 하나 생성
# 전체 점수의 합계 (total_score)
# 전체 점수의 평균(mean_score)
df[['math']] + df[['english']] + df[['science']]
# 새로운 파생변수 하나 생성
# 전체 점수의 합계 (total_score)
# 전체 점수의 평균(mean_score)
total_score = df[['math']] + df[['english']] + df[['science']]
data.frame(df,total_score)
data.frame(df,total_score) -> df
(df[['math']] + df[['english']] + df[['science']])/3
mean_score = (df[['math']] + df[['english']] + df[['science']])/3
data.frame(df,mean_score) -> df
df
df$total_score
(total_score)/3
# 평균 점수가 60점 이상이면 pass, 아니면 fail
# res 컬럼을 생성
# ifelse(조건식, 참인 경우의 값, 거짓인 경우의 값)
ifelse(df$mean_score >= 60, 'pass', 'fail')
# 평균 점수가 60점 이상이면 pass, 아니면 fail
# res 컬럼을 생성
# ifelse(조건식, 참인 경우의 값, 거짓인 경우의 값)
df$res = ifelse(df$mean_score >= 60, 'pass', 'fail')
df
# 1학년 중에 평균 점수가 가장 높은 사람의 정보를 출력
df[df$class = 1]
# 1학년 중에 평균 점수가 가장 높은 사람의 정보를 출력
df[df$class == 1]
# 1학년 중에 평균 점수가 가장 높은 사람의 정보를 출력
df[df$class == 1,]
# 1학년 중에 평균 점수가 가장 높은 사람의 정보를 출력
df2 = df[df$class == 1,]
df2
df2[order(df2$mean_score)]
df2[order(df2$mean_score),]
df2[order(-df2$mean_score),]
df2[order(-df2$mean_score),].head(1)
df3 = df2[order(-df2$mean_score),]
df3.head(1)
head(df3,1)
source("C:/Users/Sejin/Documents/GitHub/2023prac/R dataframe 연습.R", echo=TRUE)
df %>% filter(class == 1)
# 정렬
df %>% arrange(math)
# 내림차순 정렬
df %>% arrange(-math)
df %>% arrange(desc(math)
df %>% arrange(desc(math))
df %>% arrange(desc(math))
# 정렬의 기준이 여러 개인 경우
df %>% arrange(math, english)
# class를 기준으로 내림차순, math를 기준으로는 오름차순
df %>% arrange(-class, math)
# 특정 컬럼만 출력
df %>% select(math)
df %>% arange(desc(class)) %>% select(math, english)
df %>% arrange(desc(class)) %>% select(math, english)
# 특정 컬럼만 삭제
df %>% select(-id)
# 파생변수 생성
df %>% mutate(total_score = math + english + science, mean_score = total_score/3)
# 파생변수 생성
df %>% mutate(total_score = math + english + science, mean_score = total_score/3) -> df
# 1학년 중에 평균 점수가 가장 높은 사람의 정보를 출력
df %>% filter(class == 1) %>% arrange(desc(mean_score)) %>% head(1)
# group화 summarise
df %>%
grop_by(class) %>%
summarise(mean_math = mean(math), mean_english = mean(english))
# group화 summarise
df %>%
group_by(class) %>%
summarise(mean_math = mean(math), mean_english = mean(english))
# group화 summarise
df %>%
group_by(class) %>%
summarise(mean_math = mean(math), mean_english = mean(english)) %>%
arrange(-mean_math)
# group화 summarise
df %>%
group_by(class) %>%
summarise(mean_math = mean(math), mean_english = mean(english)) %>%
arrange(-mean_math) %>% head(1)
# join
df1 = data.frame(id = 1:5, score = c(80, 70, 40, 60, 50))
df2 = data.frame(id = 1:5, weight = c(80, 65, 70, 55, 90))
df3 = data.frame(id = 1:3, weight = c(1, 1, 2))
inner_join(df1,df2, by='id')
inner_join(df1, df3, by= 'id')
left_join(df1,df3, by='id')
df1 = data.frame(id = 1:5, score = c(80, 70, 40, 60, 50))
df2 = data.frame(id = 1:5, weight = c(80, 65, 70, 55, 90))
df3 = data.frame(id = 1:3, class = c(1, 1, 2))
inner_join(df1,df2, by='id')
inner_join(df1, df3, by= 'id')
left_join(df1,df3, by='id')
# 유니언 결합(python 에서는 concat)
rbind(df1, df2)
bind_rows(df1,df2)
right_join(df1, df3, by='id')
# 결측치에 대한 계산
# 결측치는 연산이 되지 않는다.
# 필터를 걸게되면 무조건 출력
c1 = c(1,2,NA,NA,5)
function (x, df1, df2, ncp, log = FALSE)
# 결측치에 대한 계산
# 결측치는 연산이 되지 않는다.
# 필터를 걸게되면 무조건 출력
c1 = c(1,2,NA,NA,5)
c2 = c(1,2,3,4,5)
c3 = c(NA, 2, 3, 4, 5)
df = data.frame(c1,c2,c3)
df
df %>% filter(c1 > 3)
# 결측치를 확인하는 방법
is.na(df)
is.na(df$c1)
#dpylr 패키지를 이용하여 결측치를 제거한 데이터를 확인하는 방법
df$ %>% filter(is.na(c1))
#dpylr 패키지를 이용하여 결측치를 제거한 데이터를 확인하는 방법
df %>% filter(is.na(c1))
#dpylr 패키지를 이용하여 결측치를 제거한 데이터를 확인하는 방법
df %>% filter(!is.na(c1))
# # 결측치를 확인하는 방법
is.na(df)
!is.na(df)
na.omit(df)
#결측치를 제외하고 연산
mean(df$c1)
mean(df$c2)
mean(df$c3)
mean(df$c1, na.rm = T)
# 결측치로 만들기
exam[c(5,7), 3 ] = NA
# 결측치로 만들기
exam[c(5,7), 3] = NA
exam = read.csv.("csv/csv/csv_exam.csv")
# 결측치로 만들기
exam[c(5,7), 3] = NA
exam
View(exam)
exam = read.csv.("csv/csv/csv_exam.csv")
# 결측치로 만들기
exam[c(5,7), 3] = NA
exam = read.csv.("csv/csv/csv_exam.csv")
exam = read.csv("csv/csv/csv_exam.csv")
# 결측치로 만들기
exam[c(5,7), 3] = NA
exam
View(exam)
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
exam %>% summarise(mean('math'))
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
mean(df$math)
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
mean(exam$math, na.rm = T)
source("~/.active-rstudio-document", echo=TRUE)
is.na(exam$math)
exam %>% filter(is.na(math))
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
mean(exam$math, na.rm = T)
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
mean(exam$math, na.rm = T)
is.na(exam$math)
# 수학 점수의 평균 값 출력
# 결측치인 값을 수학 점수의 평균으로 대체
# ifelse() 함수를 이용하여 결측치에 수학점수의 평균값을 대입
mean(exam$math, na.rm = T) ->mean_math
ifelse(is.na(exam$math), mean_math, exam$math)
ifelse(is.na(exam$math), mean_math, exam$math) ->exam$math
exam
# 이상치
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
outlier
# gender가 1 아니면 2인 경우에만 데이터를 출력
outlier[outlier$gender== 1 | outlier$gender== 2,]
outlier %>% filter(gender == 1 | gender == 2)
# gender가 1과 2가 아니면 결측치로 변경
ifelse(outlier$gender != 1 & outlier$gender != 2, NA, outlier$gender)
# 결측치를 제거
na.omit(outlier)
# gender가 1과 2가 아니면 결측치로 변경
outlier$gender = ifelse(outlier$gender != 1 & outlier$gender != 2, NA, outlier$gender)
# 결측치를 제거
na.omit(outlier)
